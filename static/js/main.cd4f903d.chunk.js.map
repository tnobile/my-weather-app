{"version":3,"sources":["components/Inputs/Inputs.module.css","components/Logo/Logo.module.css","components/Conditions/Conditions.module.css","components/Forecast/Forecast.module.css","components/Conditions/Conditions.js","components/Inputs/Inputs.js","components/Forecast/Forecast.js","components/Logo/Logo.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","conditions","props","className","classes","Wrapper","error","Small","loading","Loader","responseObj","cod","name","Math","round","main","temp","weather","description","Inputs","onSubmit","getForecast","type","placeholder","maxLength","textInput","value","mykey","onChange","e","handleKey","target","sleepTime","handleSleepTime","inlineFlex","join","city","handleCity","onClick","Radio","checked","unit","handleUnit","Button","toCelsius","fahrenheit","toFahrenheit","celsius","tryConvert","temperature","convert","input","parseFloat","Number","isNaN","output","toString","Forecast","useState","setResponseObj","setCity","setUnit","setError","setLoading","key","setKey","setSleepTime","lon","setLon","lat","setLat","scale","setTemperature","useEffect","console","log","JSON","stringify","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","uriEncodedCity","encodeURIComponent","preventDefault","length","url","fetch","then","ms","Promise","resolve","setTimeout","sleep","random","response","json","Error","n","handleTemperature","catch","err","message","Conditions","Logo","sky","circle","cloud1","cloud2","cloud3","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd4f903d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textInput\":\"Inputs_textInput__qeVoo\",\"inlineFlex\":\"Inputs_inlineFlex__30qcM\",\"Radio\":\"Inputs_Radio__2PRPz\",\"Button\":\"Inputs_Button__3HfNQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"circle\":\"Logo_circle__2RiV1\",\"sky\":\"Logo_sky__23K2O\",\"cloud1\":\"Logo_cloud1__1hNUH\",\"cloud2\":\"Logo_cloud2__2rTBv\",\"cloud3\":\"Logo_cloud3__2Vwp2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Conditions_Wrapper__ZCA7t\",\"Small\":\"Conditions_Small__2vGVg\",\"Loader\":\"Conditions_Loader__Nw5KN\",\"spin\":\"Conditions_spin__3MyJr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Forecast_Button__xX44_\"};","import React from 'react';\r\nimport classes from './Conditions.module.css';\r\n\r\nconst conditions = (props) => {\r\n    return (\r\n        <div className={classes.Wrapper}>\r\n            {props.error && <small className={classes.Small}>Please enter a valid city and key.</small>}\r\n\r\n            {props.loading && <div className={classes.Loader} />}\r\n\r\n            {props.responseObj.cod === 200 ?\r\n                <div>\r\n                    <p><strong>{props.responseObj.name}</strong></p>\r\n                    <p>It is currently {Math.round(props.responseObj.main.temp)} degrees out with {props.responseObj.weather[0].description}.</p>\r\n                </div>\r\n                : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default conditions;","import React, { useState } from 'react';\r\nimport classes from './Inputs.module.css';\r\n\r\nconst Inputs = (props) => {\r\n    return (\r\n        <div>\r\n            <h2>Find Current Weather Conditions</h2>\r\n            <form onSubmit={props.getForecast}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter Key\"\r\n                    maxLength=\"49\"\r\n                    className={classes.textInput}\r\n                    value={props.mykey}\r\n                    onChange={e => props.handleKey(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter SleepTime\"\r\n                    maxLength=\"49\"\r\n                    className={classes.textInput}\r\n                    value={props.sleepTime}\r\n                    onChange={e => props.handleSleepTime(e.target.value)}\r\n                />\r\n                <div>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Enter City\"\r\n                        maxLength=\"49\"\r\n                        className={[classes.textInput, classes.inlineFlex].join(' ')}\r\n                        value={props.city}\r\n                        onChange={e => props.handleCity(e.target.value)}\r\n                    />\r\n                    <button type='button' className={[classes.inlineFlex].join(' ')} onClick={() => props.handleCity('')}>x</button>\r\n                </div>\r\n                <label className={classes.Radio}>\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"units\"\r\n                        checked={props.unit === \"imperial\"}\r\n                        value=\"imperial\"\r\n                        onChange={e => props.handleUnit(e.target.value)}\r\n                    />\r\n                    Fahrenheit\r\n                </label>\r\n                <label className={classes.Radio}>\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"units\"\r\n                        checked={props.unit === \"metric\"}\r\n                        value=\"metric\"\r\n                        onChange={e => props.handleUnit(e.target.value)}\r\n                    />\r\n                    Celcius\r\n                </label>\r\n                <button\r\n                    className={classes.Button}\r\n                    type=\"submit\">Get Forecast</button>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Inputs;","import React, { useState, useEffect } from 'react';\r\nimport Conditions from '../Conditions/Conditions';\r\nimport Inputs from '../Inputs/Inputs';\r\nimport classes from './Forecast.module.css';\r\n\r\nconst Forecast = () => {\r\n    let [responseObj, setResponseObj] = useState({});\r\n    let [city, setCity] = useState('');\r\n    let [unit, setUnit] = useState('metric');\r\n    let [error, setError] = useState(false);\r\n    let [loading, setLoading] = useState(false);\r\n    let [key, setKey] = useState('');\r\n    let [sleepTime, setSleepTime] = useState(1000);\r\n    let [lon, setLon] = useState();\r\n    let [lat, setLat] = useState();\r\n    let [temperature, setTemperature] = useState([{ scale: 'c', temp: 0 }, { scale: 'f', temp: 0 }]);\r\n\r\n    useEffect(() => console.log(JSON.stringify(temperature)), [temperature]);\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(function (position) {\r\n            setLat(position.coords.latitude);\r\n            setLon(position.coords.longitude);\r\n        });\r\n\r\n        console.log(\"Latitude is:\", lat);\r\n        console.log(\"Longitude is:\", lon);\r\n    }, [lat, lon]);\r\n\r\n    const uriEncodedCity = encodeURIComponent(city);\r\n\r\n    function handleKey(value) {\r\n        setKey(value);\r\n    }\r\n    function handleSleepTime(value) {\r\n        setSleepTime(value);\r\n    }\r\n    function handleUnit(value) {\r\n        setUnit(value);\r\n    }\r\n    function handleCity(value) {\r\n        setCity(value);\r\n    }\r\n    function handleTemperature(value, unit) {\r\n        if (unit === 'metric') {\r\n            setTemperature([{ scale: 'c', temp: tryConvert(value, n => n) }, { scale: 'f', temp: tryConvert(value, toFahrenheit) }]);\r\n        } else {\r\n            setTemperature([{ scale: 'f', temp: tryConvert(value, n => n) }, { scale: 'c', temp: tryConvert(value, toCelsius) }]);\r\n        }\r\n        console.log(JSON.stringify(temperature));\r\n    }\r\n    function getForecast(e) {\r\n        e.preventDefault();\r\n\r\n        if (!key || key.length === 0) {\r\n            setError(0);\r\n            return;\r\n        }\r\n        setError(false);\r\n        setResponseObj({});\r\n        setLoading(true);\r\n\r\n        const url = city ?\r\n            `https://api.openweathermap.org/data/2.5/weather?q=${uriEncodedCity}&units=${unit}&appid=${key}` :\r\n            `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=${unit}&appid=${key}`;\r\n        console.log(url);\r\n        fetch(url)\r\n            //  The promise, returned by fetch, resolves with an object of the built-in Response class \r\n            //  as soon as the server responds with headers.\r\n            //  let resp = await fetch(url);\r\n\r\n            //       fetch(\"https://community-open-weather-map.p.rapidapi.com/weather?q=Manchester%2Cuk&units=metric\", {\r\n            //           \"method\": \"GET\",\r\n            //           \"headers\": {\r\n            //               \"x-rapidapi-key\": process.env.REACT_APP_API_KEY\r\n            //               \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\r\n            //           }\r\n            //       })\r\n            .then(value => sleep(Math.random() * sleepTime, value))\r\n            .then(response => response.json())\r\n            .then(\r\n                response => {\r\n                    if (response.cod !== 200) {\r\n                        throw new Error();\r\n                    }\r\n                    //console.log(response);\r\n                    handleCity(response.name)\r\n                    setResponseObj(response);\r\n                    handleTemperature(response.main.temp, unit);\r\n                    setLoading(false);\r\n                })\r\n            .catch(err => {\r\n                setError(true);\r\n                setLoading(false);\r\n                console.error(err.message);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label>{temperature[0]['temp'] ? JSON.stringify(temperature) : ''}</label>\r\n            <Inputs\r\n                getForecast={getForecast}\r\n                city={city}\r\n                mykey={key}\r\n                unit={unit}\r\n                sleepTime={sleepTime}\r\n                handleCity={handleCity}\r\n                handleKey={handleKey}\r\n                handleUnit={handleUnit}\r\n                handleSleepTime={handleSleepTime}\r\n            />\r\n            <button className={classes.Button} onClick={() => handleCity('')}>Clear City</button>\r\n            <Conditions\r\n                responseObj={responseObj}\r\n                error={error}\r\n                loading={loading}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction sleep(ms, value) {\r\n    return new Promise(resolve => setTimeout(resolve, ms, value));\r\n}\r\n\r\n\r\nfunction toCelsius(fahrenheit) {\r\n    return (fahrenheit - 32) * 5 / 9;\r\n}\r\n\r\nfunction toFahrenheit(celsius) {\r\n    return (celsius * 9 / 5) + 32;\r\n}\r\n\r\nfunction tryConvert(temperature, convert) {\r\n    const input = parseFloat(temperature);\r\n    if (Number.isNaN(input)) {\r\n        return '';\r\n    }\r\n    const output = convert(input);\r\n    const rounded = Math.round(output * 1000) / 1000;\r\n    return rounded.toString();\r\n}\r\n\r\nconst scaleNames = {\r\n    c: 'metric',   //'Celsius',\r\n    f: 'imperial'  //'Fahrenheit'\r\n};\r\n\r\nexport default Forecast;","import React from 'react';\r\nimport classes from \"./Logo.module.css\"\r\n\r\nconst Logo = () => (\r\n    <div className={classes.sky}>\r\n        <div className={classes.circle}/>\r\n        <div className={classes.cloud1} />\r\n        <div className={classes.cloud2} />\r\n        <div className={classes.cloud3} />\r\n    </div>\r\n)\r\n\r\nexport default Logo;","import React from 'react';\nimport './App.css';\nimport Forecast from \"./components/Forecast/Forecast\";\nimport Logo from \"./components/Logo/Logo\";\n\n/**\n * https://rapidapi.com/blog/weather-app-react/\n * https://github.com/jdretz/rapid-api-react-weather-app-tutorial\n */\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Logo />\n        <h1> Reactive Weather App</h1>\n        <main>\n          <Forecast />\n        </main>\n        <footer>\n          Page created by tnobile.\n        </footer>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}