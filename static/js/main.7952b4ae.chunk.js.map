{"version":3,"sources":["components/Inputs/Inputs.module.css","components/Logo/Logo.module.css","components/Conditions/Conditions.module.css","components/Conditions/Conditions.js","components/Inputs/Inputs.js","components/Forecast/Forecast.js","components/Logo/Logo.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","conditions","props","className","classes","Wrapper","error","Small","loading","Loader","responseObj","cod","name","Math","round","main","temp","weather","description","Inputs","onSubmit","getForecast","type","placeholder","maxLength","textInput","value","key","onChange","e","handleKey","target","sleepTime","handleSleepTime","city","handleCity","Radio","checked","unit","handleUnit","Button","Forecast","useState","setResponseObj","setCity","setUnit","setError","setLoading","setKey","setSleepTime","uriEncodedCity","encodeURIComponent","preventDefault","length","url","fetch","then","ms","Promise","resolve","setTimeout","sleep","random","response","json","Error","catch","err","console","message","Conditions","Logo","sky","circle","cloud1","cloud2","cloud3","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7952b4ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textInput\":\"Inputs_textInput__qeVoo\",\"Radio\":\"Inputs_Radio__2PRPz\",\"Button\":\"Inputs_Button__3HfNQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"circle\":\"Logo_circle__2RiV1\",\"sky\":\"Logo_sky__23K2O\",\"cloud1\":\"Logo_cloud1__1hNUH\",\"cloud2\":\"Logo_cloud2__2rTBv\",\"cloud3\":\"Logo_cloud3__2Vwp2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Conditions_Wrapper__ZCA7t\",\"Small\":\"Conditions_Small__2vGVg\",\"Loader\":\"Conditions_Loader__Nw5KN\",\"spin\":\"Conditions_spin__3MyJr\"};","import React from 'react';\r\nimport classes from './Conditions.module.css';\r\n\r\nconst conditions = (props) => {\r\n    return (\r\n        <div className={classes.Wrapper}>\r\n            {props.error && <small className={classes.Small}>Please enter a valid city and key.</small>}\r\n\r\n            {props.loading && <div className={classes.Loader} />}\r\n\r\n            {props.responseObj.cod === 200 ?\r\n                <div>\r\n                    <p><strong>{props.responseObj.name}</strong></p>\r\n                    <p>It is currently {Math.round(props.responseObj.main.temp)} degrees out with {props.responseObj.weather[0].description}.</p>\r\n                </div>\r\n                : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default conditions;","import React, { useState } from 'react';\r\nimport classes from './Inputs.module.css';\r\n\r\nconst Inputs = (props) => {\r\n    return (\r\n        <div>\r\n            <h2>Find Current Weather Conditions</h2>\r\n            <form onSubmit={props.getForecast}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter Key\"\r\n                    maxLength=\"49\"\r\n                    className={classes.textInput}\r\n                    value={props.key}\r\n                    onChange={e => props.handleKey(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter SleepTime\"\r\n                    maxLength=\"49\"\r\n                    className={classes.textInput}\r\n                    value={props.sleepTime}\r\n                    onChange={e => props.handleSleepTime(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter City\"\r\n                    maxLength=\"49\"\r\n                    className={classes.textInput}\r\n                    value={props.city}\r\n                    onChange={e => props.handleCity(e.target.value)}\r\n                />\r\n                <label className={classes.Radio}>\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"units\"\r\n                        checked={props.unit === \"imperial\"}\r\n                        value=\"imperial\"\r\n                        onChange={e => props.handleUnit(e.target.value)}\r\n                    />\r\n                    Fahrenheit\r\n                </label>\r\n                <label className={classes.Radio}>\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"units\"\r\n                        checked={props.unit === \"metric\"}\r\n                        value=\"metric\"\r\n                        onChange={e => props.handleUnit(e.target.value)}\r\n                    />\r\n                    Celcius\r\n                </label>\r\n                <button\r\n                    className={classes.Button}\r\n                    type=\"submit\">Get Forecast</button>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Inputs;","import React, { useState } from 'react';\r\nimport Conditions from '../Conditions/Conditions';\r\nimport Inputs from '../Inputs/Inputs';\r\n\r\nconst Forecast = () => {\r\n    let [responseObj, setResponseObj] = useState({});\r\n    let [city, setCity] = useState('London');\r\n    let [unit, setUnit] = useState('metric');\r\n    let [error, setError] = useState(false);\r\n    let [loading, setLoading] = useState(false);\r\n    let [key, setKey] = useState('');\r\n    let [sleepTime, setSleepTime] = useState(1000);\r\n\r\n    const uriEncodedCity = encodeURIComponent(city);\r\n\r\n    function handleKey(value) {\r\n        setKey(value);\r\n    }\r\n    function handleSleepTime(value) {\r\n        setSleepTime(value);\r\n    }\r\n    function handleUnit(value) {\r\n        setUnit(value);\r\n    }\r\n    function handleCity(value) {\r\n        setCity(value);\r\n    }\r\n    function getForecast(e) {\r\n        e.preventDefault();\r\n        if (city.length === 0) {\r\n            return setError(0);\r\n        }\r\n\r\n        setError(false);\r\n        setResponseObj({});\r\n        setLoading(true);\r\n\r\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${uriEncodedCity}&units=${unit}&appid=${key}`;\r\n        fetch(url)\r\n            //  The promise, returned by fetch, resolves with an object of the built-in Response class \r\n            //  as soon as the server responds with headers.\r\n            //  let resp = await fetch(url);\r\n\r\n            //       fetch(\"https://community-open-weather-map.p.rapidapi.com/weather?q=Manchester%2Cuk&units=metric\", {\r\n            //           \"method\": \"GET\",\r\n            //           \"headers\": {\r\n            //               \"x-rapidapi-key\": process.env.REACT_APP_API_KEY\r\n            //               \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\r\n            //           }\r\n            //       })\r\n            .then(value => sleep(Math.random() * sleepTime, value))\r\n            .then(response => response.json())\r\n            .then(\r\n                response => {\r\n                    if (response.cod !== 200) {\r\n                        throw new Error();\r\n                    }\r\n                    //console.log(response);\r\n                    setResponseObj(response);\r\n                    setLoading(false);\r\n                })\r\n            .catch(err => {\r\n                setError(true);\r\n                setLoading(false);\r\n                console.error(err.message);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Inputs\r\n                getForecast={getForecast}\r\n                city={city}\r\n                key={key}\r\n                unit={unit}\r\n                sleepTime={sleepTime}\r\n                handleCity={handleCity}\r\n                handleKey={handleKey}\r\n                handleUnit={handleUnit}\r\n                handleSleepTime={handleSleepTime}\r\n            />\r\n            <Conditions\r\n                responseObj={responseObj}\r\n                error={error}\r\n                loading={loading}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction sleep(ms, value) {\r\n    return new Promise(resolve => setTimeout(resolve, ms, value));\r\n}\r\n\r\nexport default Forecast;","import React from 'react';\r\nimport classes from \"./Logo.module.css\"\r\n\r\nconst Logo = () => (\r\n    <div className={classes.sky}>\r\n        <div className={classes.circle}/>\r\n        <div className={classes.cloud1} />\r\n        <div className={classes.cloud2} />\r\n        <div className={classes.cloud3} />\r\n    </div>\r\n)\r\n\r\nexport default Logo;","import React from 'react';\nimport './App.css';\nimport Forecast from \"./components/Forecast/Forecast\";\nimport Logo from \"./components/Logo/Logo\";\n\n/**\n * https://rapidapi.com/blog/weather-app-react/\n * https://github.com/jdretz/rapid-api-react-weather-app-tutorial\n */\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Logo />\n        <h1> Reactive Weather App</h1>\n        <main>\n          <Forecast />\n        </main>\n        <footer>\n          Page created by tnobile.\n        </footer>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}